cmake_minimum_required(VERSION 3.0)

project(AwesomeRenderer)

option(GLFW_BUILD_DOCS OFF)
option(GLFW_BUILD_EXAMPLES OFF)
option(GLFW_BUILD_TESTS OFF)

option(ASSIMP_BUILD_ASSIMP_TOOLS OFF)
option(ASSIMP_BUILD_SAMPLES OFF)
option(ASSIMP_BUILD_TESTS OFF)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${AwesomeRenderer_SOURCE_DIR}/bin")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${AwesomeRenderer_SOURCE_DIR}/Debug")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${AwesomeRenderer_SOURCE_DIR}/Release")

include(macros)
include(modules/sanitizers_support)
include(modules/clang_tidy_support)
include(modules/add_ide_support)

detect_platform()
print_info()
set_output_paths()

add_subdirectory_ex(3rdpart)

# FreeImage Header
if (WIN32)
include_directories("./3rdpart/freeimage/distrib/windows/${EX_PLATFORM_NAME}")
elseif (APPLE)
include_directories("./3rdpart/freeimage/distrib/osx")
else()
find_package(FreeImage REQUIRED)
include_directories(${FREEIMAGE_INCLUDE_DIRS})
endif()

include_directories(
src/engine/
src/engine/photon_mapping/
src/engine/real_time_pbr/camera/
src/engine/real_time_pbr/lighting/
src/engine/real_time_pbr/mesh/
src/engine/real_time_pbr/resources/
src/editor/core/
src/editor/mesh/

3rdpart/
3rdpart/glad/include/
3rdpart/assimp/assimp/include/
3rdpart/glfw/include/
3rdpart/glm/
3rdpart/stb/
3rdpart/imgui/
3rdpart/libkdtree/
)

FILE(GLOB API_SOURCES 
3rdpart/glad/src/glad.c
3rdpart/imgui/*.cpp
)

file(GLOB PROJECT_SHADERS 
resources/shaders/*.glsl
resources/shaders/*.frag
resources/shaders/*.vert
resources/shaders/lighting/*.glsl
resources/shaders/lighting/*.frag
resources/shaders/lighting/*.vert
resources/shaders/lighting/ibl/*.glsl
resources/shaders/lighting/ibl/*.frag
resources/shaders/lighting/ibl/*.vert
resources/shaders/postprocess/*.glsl
resources/shaders/postprocess/*.frag
resources/shaders/postprocess/*.vert
)

FILE(GLOB PROJECT_CONFIGS
CmakeLists.txt
.gitignore
.gitmodules
TODO.md
README.md
LICENSE
)

source_group("API" FILES ${API_SOURCES})
source_group("Shaders" FILES ${PROJECT_SHADERS})

file(GLOB_RECURSE project_headers src/*.h*)
file(GLOB_RECURSE project_cpps src/*.cpp)
file(GLOB_RECURSE project_cs src/*.c)

set(all_files ${project_headers} ${project_cpps} ${project_cs})
source_group_by_dir(all_files)

file(GLOB_RECURSE thirdparty_headers 3rdpart/*.h)
file(GLOB_RECURSE thirdparty_cpps 3rdpart/*.cpp)
file(GLOB_RECURSE thirdparty_cs 3rdpart/*.c)
set(thirdparty_files ${thirdparty_headers} ${thirdparty_cpps} ${thirdparty_cs})

add_executable(AwesomeRenderer
${all_files}
${API_SOURCES}
${PROJECT_SHADERS}
${PROJECT_CONFIGS}
src/main.cpp
)

target_link_libraries(${PROJECT_NAME} glfw)
target_link_libraries(${PROJECT_NAME} assimp)

add_definitions(
	-DGLFW_INCLUDE_NONE
	-DWINDOWS
    -DPROJECT_SOURCE_DIR=\"${PROJECT_SOURCE_DIR}\"
    -DASSET_PATH=\"${PROJECT_SOURCE_DIR}/resources\"
	)
link_directories(${AwesomeRenderer_SOURCE_DIR})